import requests import whois import tldextract import logging import re # Configure logging logging.basicConfig(filename='phishing_detection.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s') # List of known phishing domains (Add more to enhance detection) known_phishing_domains = [     "example-phishing.com",     "badwebsite.com",     "phishingsite.net" ] # Function to check if a URL matches known phishing domains def is_known_phishing(url):     domain = tldextract.extract(url).domain + '.' + tldextract.extract(url).suffix     return domain in known_phishing_domains # Function to perform heuristic checks def heuristic_checks(url):     # Check for length of domain     if len(url) < 25:         logging.info(f"Heuristic Check Passed: URL '{url}' is of reasonable length.")     else:         logging.warning(f"Heuristic Check Failed: URL '{url}' is unusually long.")         return True  # Flag it     # Check for suspicious characters     if re.search(r'[!@#$%^&*(),<>?:"{}|]', url):         logging.warning(f"Heuristic Check Failed: URL '{url}' contains suspicious characters.")         return True  # Flag it     # Check if the URL contains an IP address     if re.match(r'http[s]?://\d+\.\d+\.\d+\.\d+', url):         logging.warning(f"Heuristic Check Failed: URL '{url}' contains an IP address.")         return True  # Flag it     return False  # No flags # Function to analyze URLs in web traffic def analyze_url(url):     logging.info(f"Analyzing URL: {url}")     # Check for known phishing domain     if is_known_phishing(url):         logging.warning(f"Phishing URL Detected: {url} (Known Domain)")         return True     # Perform heuristic checks     if heuristic_checks(url):         logging.warning(f"Phishing URL Detected: {url} (Heuristic)")         return True     # Optionally, you could use WHOIS for further checks     try:         w = whois.whois(tldextract.extract(url).domain)         if w.status is None:             logging.warning(f"Phishing URL Detected: {url} (WHOIS Status Unknown)")             return True     except Exception as e:         logging.error(f"WHOIS lookup failed for {url}: {e}")     logging.info(f"URL is safe: {url}")     return False # Example usage if __name__ == "__main__":     test_urls = [         "http://example-phishing.com",         "http://safe-site.com",         "http://suspicious-url-12345.com",         "http://192.168.0.1"     ]     for url in test_urls:         analyze_url(url)     logging.info("URL analysis completed.") 